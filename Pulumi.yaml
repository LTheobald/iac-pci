name: iac-pci
description: Testing IAC using Pulumi to emulate a PCI environment
runtime: yaml

resources:

  # AWS Organisation
  iacTestOrg:
    type: aws:organizations:Organization
    properties:
      featureSet: "ALL"

  # Create an Organizational Unit (OU) for the non-PCI realm
  nonPciOU:
    type: aws:organizations:OrganizationalUnit
    properties:
      name: "Non-PCI"
      parentId: ${iacTestOrg.roots[0].id}

  # Create an Organizational Unit (OU) for PCI realm
  pciOU:
    type: aws:organizations:OrganizationalUnit
    properties:
      name: "Production"
      parentId: ${iacTestOrg.roots[0].id}

  # Create 2 accounts under the non-PCI OU. One for the 'control' suite. One for an app.
  nonPciControlAccount:
    type: aws:organizations:Account
    properties:
      name: "Non-PCI Control Account"
      email: "non-pci-control+lee@ltheobald.co.uk"
      roleName: "OrganizationAccountAccessRole"
      parentId: ${nonPciOU.id}
  nonPciAppAccount:
    type: aws:organizations:Account
    properties:
      name: "Non-PCI App Account"
      email: "non-pci-app+lee@ltheobald.co.uk"
      roleName: "OrganizationAccountAccessRole"
      parentId: ${nonPciOU.id}
      
  # Create 2 accounts under the PCI OU. One for the 'control' suite. One for an app.
  pciControlAccount:
    type: aws:organizations:Account
    properties:
      name: "PCI Control Account"
      email: "pci-control+lee@ltheobald.co.uk"
      roleName: "OrganizationAccountAccessRole"
      parentId: ${pciOU.id}
  pciAppAccount:
    type: aws:organizations:Account
    properties:
      name: "PCI App Account"
      email: "pci-app+lee@ltheobald.co.uk"
      roleName: "OrganizationAccountAccessRole"
      parentId: ${pciOU.id}

  # AWS Providers for the 4 accounts
  nonPciControlProvider:
    type: aws:providers:Provider
    properties:
      region: eu-west-1
      assumeRole:
        roleArn: arn:aws:iam::${nonPciControlAccount.id}:role/OrganizationAccountAccessRole
  nonPciAppProvider:
    type: aws:providers:Provider
    properties:
      region: eu-west-1
      assumeRole:
        roleArn: arn:aws:iam::${nonPciAppAccount.id}:role/OrganizationAccountAccessRole
  pciControlProvider:
    type: aws:providers:Provider
    properties:
      region: eu-west-1
      assumeRole:
        roleArn: arn:aws:iam::${pciControllAccount.id}:role/OrganizationAccountAccessRole
  pciAppProvider:
    type: aws:providers:Provider
    properties:
      region: eu-west-1
      assumeRole:
        roleArn: arn:aws:iam::${pciAppAccount.id}:role/OrganizationAccountAccessRole

  
  # Setup the Non-PCI control plane
  # ECR Repository
  nonPciControllECR:
    type: aws:ecr:Repository
    properties:
      name: non-pci-repository
    options:
      provider: ${nonPciProvider}

  # S3 bucket for artefacts
  nonPciControlS3:
    type: aws:s3:Bucket
    properties:
      name: non-pci-control-s3
    options:
      provider: ${nonPciProvider}

  nonPciCodeBuildRole:
    type: aws:iam:Role
    properties:
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }

  # ðŸ”¹ IAM Policy for CodeBuild (Allow access to ECR, S3, and ECS)
  nonPciCodeBuildPolicy:
    type: aws:iam:RolePolicy
    options:
      provider: ${nonPciControlProvider}
    properties:
      role: ${nonPciCodeBuildRole.id}
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": ["s3:*"],
              "Resource": "${nonPciControlS3.arn}/*"
            }
          ]
        }

  # ðŸ”¹ CodeBuild Project for Java & Docker Image Build
  nonPciCodeBuildProject:
    type: aws:codebuild:Project
    options:
      provider: ${nonPciControlProvider}
    properties:
      name: "JavaAppBuild"
      serviceRole: ${nonPciCodeBuildRole.arn}
      artifacts:
        type: S3
        location: ${nonPciControlS3.id}
      environment:
        computeType: BUILD_GENERAL1_SMALL
        image: "aws/codebuild/standard:5.0"
        type: LINUX_CONTAINER
        privilegedMode: true
        environmentVariables:
          - name: "REPO_URI"
            value: ${nonPciControllECR.repositoryUrl}
      source:
        type: GITHUB
        location: "https://github.com/LTheobald/dummy-app.git"

  nonPciEcsCluster:
    type: aws:ecs:Cluster
    properties:
      name: non-pci-ecs-cluster
    options:
      provider: ${nonPciControlProvider}

  nonPciControlEcsTaskDefinition:
    type: aws:ecs:TaskDefinition
    options:
      provider: ${nonPciControlProvider}
    properties:
      family: "java-task"
      requiresCompatibilities: ["FARGATE"]
      networkMode: "awsvpc"
      cpu: "256"
      memory: "512"
      executionRoleArn: ${nonPciCodeBuildRole.arn}
      containerDefinitions: |
        [
          {
            "name": "java-container",
            "image": "${nonPciControllECR.repositoryUrl}:latest",
            "memory": 512,
            "cpu": 256,
            "essential": true,
            "portMappings": [
              {
                "containerPort": 8080,
                "hostPort": 8080
              }
            ]
          }
        ]

  # ðŸ”¹ ECS Service on Fargate
  nonPciControlEcsService:
    type: aws:ecs:Service
    options:
      provider: ${nonPciControlProvider}
    properties:
      name: java-ecs-service
      cluster: ${nonPciControlEcsCluster.id}
      taskDefinition: ${nonPciControlEcsTaskDefinition.arn}
      desiredCount: 2
      launchType: FARGATE
      networkConfiguration:
        subnets: ["subnet-abc", "subnet-xyz"]  # Replace with real subnet IDs
        assignPublicIp: true

  # Setup the PCI control plane
  # ECR Repository
  pciControlECR:
    type: aws:ecr:Repository
    properties:
      name: pci-repository
    options:
      provider: ${pciControlProvider}

outputs:
  devAccountId: ${devAccount.id}
  prodAccountId: ${prodAccount.id}
  organizationId: ${myOrg.id}
